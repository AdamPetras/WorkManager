// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkManager.DAL.DbContext;

namespace WorkManager.DAL.Migrations
{
    [DbContext(typeof(WorkManagerDbContext))]
    partial class WorkManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("WorkManager.DAL.Entities.ActualDateTimeEntity", b =>
                {
                    b.Property<DateTime>("ActualDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.ToView("ActualDateTimeEntity");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.CompanyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CompanySet");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.ImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Path")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("ImageSet");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.KanbanStateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("IconName")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("StateOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("TaskGroupId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TaskGroupId");

                    b.ToTable("KanbanSet");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.RelatedTaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("RelatedTaskSet");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ActualDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("RelatedTaskId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StateId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("TaskDoneDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TaskGroupId")
                        .HasColumnType("char(36)");

                    b.Property<TimeSpan>("WorkTime")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("RelatedTaskId");

                    b.HasIndex("StateId");

                    b.HasIndex("TaskGroupId");

                    b.ToTable("TaskSet");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.TaskGroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TaskGroupSet");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Password")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Surname")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("UserSet");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.WorkRecordEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ActualDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<uint>("Pieces")
                        .HasColumnType("int unsigned");

                    b.Property<double>("PricePerHour")
                        .HasColumnType("double");

                    b.Property<double>("PricePerPiece")
                        .HasColumnType("double");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("WorkTime")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("WorkSet");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.CompanyEntity", b =>
                {
                    b.HasOne("WorkManager.DAL.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.ImageEntity", b =>
                {
                    b.HasOne("WorkManager.DAL.Entities.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.KanbanStateEntity", b =>
                {
                    b.HasOne("WorkManager.DAL.Entities.TaskGroupEntity", "TaskGroup")
                        .WithMany()
                        .HasForeignKey("TaskGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskGroup");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.TaskEntity", b =>
                {
                    b.HasOne("WorkManager.DAL.Entities.RelatedTaskEntity", "RelatedTask")
                        .WithMany("RelatedTasks")
                        .HasForeignKey("RelatedTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkManager.DAL.Entities.KanbanStateEntity", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkManager.DAL.Entities.TaskGroupEntity", "TaskGroup")
                        .WithMany()
                        .HasForeignKey("TaskGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedTask");

                    b.Navigation("State");

                    b.Navigation("TaskGroup");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.TaskGroupEntity", b =>
                {
                    b.HasOne("WorkManager.DAL.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.WorkRecordEntity", b =>
                {
                    b.HasOne("WorkManager.DAL.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.RelatedTaskEntity", b =>
                {
                    b.Navigation("RelatedTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
