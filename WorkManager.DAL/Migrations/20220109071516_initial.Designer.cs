// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkManager.DAL.DbContext;

namespace WorkManager.DAL.Migrations
{
    [DbContext(typeof(WorkManagerDbContext))]
    [Migration("20220109071516_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("WorkManager.DAL.Entities.CompanyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("CompanySet");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.ImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("ImageSet");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.KanbanStateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("IconName")
                        .HasColumnType("text");

                    b.Property<Guid>("IdTaskGroup")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StateOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdTaskGroup");

                    b.ToTable("KanbanSet");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActualDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("IdState")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTaskGroup")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TaskDoneDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("WorkTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("IdState");

                    b.HasIndex("IdTaskGroup");

                    b.ToTable("TaskSet");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.TaskGroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("TaskGroupSet");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserSet");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.WorkRecordEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActualDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("IdCompany")
                        .HasColumnType("uuid");

                    b.Property<long>("Pieces")
                        .HasColumnType("bigint");

                    b.Property<double>("PricePerHour")
                        .HasColumnType("double precision");

                    b.Property<double>("PricePerPiece")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("WorkTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("WorkSet");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.CompanyEntity", b =>
                {
                    b.HasOne("WorkManager.DAL.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.ImageEntity", b =>
                {
                    b.HasOne("WorkManager.DAL.Entities.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.KanbanStateEntity", b =>
                {
                    b.HasOne("WorkManager.DAL.Entities.TaskGroupEntity", "TaskGroup")
                        .WithMany()
                        .HasForeignKey("IdTaskGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskGroup");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.TaskEntity", b =>
                {
                    b.HasOne("WorkManager.DAL.Entities.KanbanStateEntity", "State")
                        .WithMany()
                        .HasForeignKey("IdState")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkManager.DAL.Entities.TaskGroupEntity", "TaskGroup")
                        .WithMany()
                        .HasForeignKey("IdTaskGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");

                    b.Navigation("TaskGroup");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.TaskGroupEntity", b =>
                {
                    b.HasOne("WorkManager.DAL.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkManager.DAL.Entities.WorkRecordEntity", b =>
                {
                    b.HasOne("WorkManager.DAL.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
